From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?IPECTER=20=EC=9D=B4=ED=8C=A9=ED=84=B0?=
 <80433772+IPECTER@users.noreply.github.com>
Date: Sun, 25 Aug 2024 05:21:35 +0900
Subject: [PATCH] Blazingly-simple-farm-checks


diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 2077cb5dcf2352c9d5b502744aeb9a66df256939..e5db5467863e7e408e3ca23dbaed3879d9b31110 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -81,28 +81,81 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
             int i = this.getAge(state);
 
             if (i < this.getMaxAge()) {
-                float f = CropBlock.getGrowthSpeed(this, world, pos);
-
-                // Spigot start
-                int modifier;
-                if (this == Blocks.BEETROOTS) {
-                    modifier = world.spigotConfig.beetrootModifier;
-                } else if (this == Blocks.CARROTS) {
-                    modifier = world.spigotConfig.carrotModifier;
-                } else if (this == Blocks.POTATOES) {
-                    modifier = world.spigotConfig.potatoModifier;
-                // Paper start - Fix Spigot growth modifiers
-                } else if (this == Blocks.TORCHFLOWER_CROP) {
-                    modifier = world.spigotConfig.torchFlowerModifier;
-                // Paper end - Fix Spigot growth modifiers
+                // Plazma start - Blazingly simple farm checks
+                if (world.plazmaConfig().blazinglySimpleFarmChecks.enabled) {
+                    // These checks are similar to getGrowthSpeed, but we have "inlined" them because we want to access stuff like the farm block data later on
+                    // Is the block below us moisturised?
+                    BlockPos farmlandBelowTheCurrentBlock = pos.below();
+                    BlockState farmlandBelowTheCurrentBlockData = world.getBlockState(farmlandBelowTheCurrentBlock);
+                    double f = world.plazmaConfig().blazinglySimpleFarmChecks.defaultGrowthSpeed;
+                    boolean isCurrentFarmlandStateMoist = false;
+                    if (farmlandBelowTheCurrentBlockData.is(Blocks.FARMLAND)) {
+                        if ((Integer) farmlandBelowTheCurrentBlockData.getValue(FarmBlock.MOISTURE) > 0) {
+                            // If we are currently moist, increase the speed!
+                            f = world.plazmaConfig().blazinglySimpleFarmChecks.moistGrowthSpeed;
+                            isCurrentFarmlandStateMoist = true;
+                        }
+                    }
+                    // If we are skipping the middle aging stages, we need to change the growth speed and the next stage accordingly
+                    if (world.plazmaConfig().blazinglySimpleFarmChecks.skipMiddleAgingStagesForCrops) {
+                        f = f / getMaxAge();
+                        i = getMaxAge() - 1;
+                    }
+
+                    // Spigot start
+                    int modifier;
+                    if (this == Blocks.BEETROOTS) {
+                        modifier = world.spigotConfig.beetrootModifier;
+                    } else if (this == Blocks.CARROTS) {
+                        modifier = world.spigotConfig.carrotModifier;
+                    } else if (this == Blocks.POTATOES) {
+                        modifier = world.spigotConfig.potatoModifier;
+                        // Paper start
+                    } else if (this == Blocks.TORCHFLOWER_CROP) {
+                        modifier = world.spigotConfig.torchFlowerModifier;
+                        // Paper end
+                    } else {
+                        modifier = world.spigotConfig.wheatModifier;
+                    }
+
+                    if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                        // Spigot end
+                        if (!CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2)) {
+                            return;
+                        }
+
+                        // Now that we know that the crop will grow... is the next stage the crop's max age? If yes, we are going to check if the farm land is moist!
+                        if (i + 1 == getMaxAge() && isCurrentFarmlandStateMoist && !FarmBlock.isNearWater(world, farmlandBelowTheCurrentBlock)) {
+                            // Whoops, farm land ain't moist!
+                            // From FarmBlock, set the moisture to 0
+                            org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, farmlandBelowTheCurrentBlock, (BlockState) farmlandBelowTheCurrentBlockData.setValue(FarmBlock.MOISTURE, 0), 2); // CraftBukkit
+                        }
+                    }
                 } else {
-                    modifier = world.spigotConfig.wheatModifier;
-                }
+                    float f = CropBlock.getGrowthSpeed(this, world, pos);
+
+                    // Spigot start
+                    int modifier;
+                    if (this == Blocks.BEETROOTS) {
+                        modifier = world.spigotConfig.beetrootModifier;
+                    } else if (this == Blocks.CARROTS) {
+                        modifier = world.spigotConfig.carrotModifier;
+                    } else if (this == Blocks.POTATOES) {
+                        modifier = world.spigotConfig.potatoModifier;
+                        // Paper start - Fix Spigot growth modifiers
+                    } else if (this == Blocks.TORCHFLOWER_CROP) {
+                        modifier = world.spigotConfig.torchFlowerModifier;
+                        // Paper end - Fix Spigot growth modifiers
+                    } else {
+                        modifier = world.spigotConfig.wheatModifier;
+                    }
 
-                if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
-                    // Spigot end
-                    CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2); // CraftBukkit
+                    if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                        // Spigot end
+                        CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2); // CraftBukkit
+                    }
                 }
+                // Plazma end
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 0c39126ce51439cce05747161aba43bce33a12d8..2016e3d7832ba75331697c46803f8e4142bf01ee 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -92,6 +92,19 @@ public class FarmBlock extends Block {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = (Integer) state.getValue(FarmBlock.MOISTURE);
+        // Plazma start - Blazingly simple farm checks
+        if (world.plazmaConfig().blazinglySimpleFarmChecks.enabled) {
+            if (i == 0) { // We only care about non-moisturised farm blocks
+                if (FarmBlock.isNearWater(world, pos)) {
+                    // Make it MOIST!
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, 7), 2); // CraftBukkit
+                } else if (!FarmBlock.shouldMaintainFarmland(world, pos)) {
+                    FarmBlock.turnToDirt((Entity) null, state, world, pos);
+                }
+            }
+            return;
+        }
+        // Plazma end
         if (i > 0 && world.paperConfig().tickRates.wetFarmland != 1 && (world.paperConfig().tickRates.wetFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.wetFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
         if (i == 0 && world.paperConfig().tickRates.dryFarmland != 1 && (world.paperConfig().tickRates.dryFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.dryFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
 
@@ -166,7 +179,7 @@ public class FarmBlock extends Block {
         return world.getBlockState(pos.above()).is(BlockTags.MAINTAINS_FARMLAND);
     }
 
-    private static boolean isNearWater(LevelReader world, BlockPos pos) {
+    public static boolean isNearWater(LevelReader world, BlockPos pos) { // Plazma - Blazingly simple farm checks - private -> public
         // Paper start - Perf: remove abstract block iteration
         int xOff = pos.getX();
         int yOff = pos.getY();
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 121a872cd750a87b779895687ae1abf5bb77b088..53e55b51c53995e2ec9314e1fc656dd5cd22dd67 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -73,36 +73,87 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getRawBrightness(pos, 0) >= 9) {
-            float f = CropBlock.getGrowthSpeed(this, world, pos);
-
-            if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
-                int i = (Integer) state.getValue(StemBlock.AGE);
-
-                if (i < 7) {
-                    state = (BlockState) state.setValue(StemBlock.AGE, i + 1);
-                    CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
-                } else {
-                    Direction enumdirection = Direction.Plane.HORIZONTAL.getRandomDirection(random);
-                    BlockPos blockposition1 = pos.relative(enumdirection);
-                    BlockState iblockdata1 = world.getBlockState(blockposition1.below());
-
-                    if (world.getBlockState(blockposition1).isAir() && (iblockdata1.is(Blocks.FARMLAND) || iblockdata1.is(BlockTags.DIRT))) {
-                        Registry<Block> iregistry = world.registryAccess().registryOrThrow(Registries.BLOCK);
-                        Optional<Block> optional = iregistry.getOptional(this.fruit);
-                        Optional<Block> optional1 = iregistry.getOptional(this.attachedStem);
-
-                        if (optional.isPresent() && optional1.isPresent()) {
-                            // CraftBukkit start
-                            if (!CraftEventFactory.handleBlockGrowEvent(world, blockposition1, ((Block) optional.get()).defaultBlockState())) {
-                                return;
+            // Plazma start - Blazingly simple farm checks
+            if (world.plazmaConfig().blazinglySimpleFarmChecks.enabled) {
+                // These checks are similar to getGrowthSpeed, but we have "inlined" them because we want to access stuff like the farm block data later on
+                // Is the block below us moisturised?
+                BlockPos farmlandBelowTheCurrentBlock = pos.below();
+                BlockState farmlandBelowTheCurrentBlockData = world.getBlockState(farmlandBelowTheCurrentBlock);
+                double f = world.plazmaConfig().blazinglySimpleFarmChecks.defaultGrowthSpeed;
+                boolean isCurrentFarmlandStateMoist = false;
+                if (farmlandBelowTheCurrentBlockData.is(Blocks.FARMLAND)) {
+                    if ((Integer) farmlandBelowTheCurrentBlockData.getValue(FarmBlock.MOISTURE) > 0) {
+                        // If we are currently moist, increase the speed!
+                        f = world.plazmaConfig().blazinglySimpleFarmChecks.moistGrowthSpeed;
+                        isCurrentFarmlandStateMoist = true;
+                    }
+                }
+
+                if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                    int i = (Integer) state.getValue(StemBlock.AGE);
+
+                    if (i < 7) {
+                        state = (BlockState) state.setValue(StemBlock.AGE, i + 1);
+                        CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
+                    } else {
+                        Direction enumdirection = Direction.Plane.HORIZONTAL.getRandomDirection(random);
+                        BlockPos blockposition1 = pos.relative(enumdirection);
+                        BlockState iblockdata1 = world.getBlockState(blockposition1.below());
+
+                        if (world.getBlockState(blockposition1).isAir() && (iblockdata1.is(Blocks.FARMLAND) || iblockdata1.is(BlockTags.DIRT))) {
+                            Registry<Block> iregistry = world.registryAccess().registryOrThrow(Registries.BLOCK);
+                            Optional<Block> optional = iregistry.getOptional(this.fruit);
+                            Optional<Block> optional1 = iregistry.getOptional(this.attachedStem);
+
+                            if (optional.isPresent() && optional1.isPresent()) {
+                                // CraftBukkit start
+                                if (!CraftEventFactory.handleBlockGrowEvent(world, blockposition1, ((Block) optional.get()).defaultBlockState())) {
+                                    return;
+                                }
+                                // CraftBukkit end
+                                // Now that we know that the crop will grow... is the next stage the crop's max age? If yes, we are going to check if the farm land is moist!
+                                if (isCurrentFarmlandStateMoist && !FarmBlock.isNearWater(world, farmlandBelowTheCurrentBlock)) {
+                                    // Whoops, farm land ain't moist!
+                                    // From FarmBlock, set the moisture to 0
+                                    org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, farmlandBelowTheCurrentBlock, (BlockState) farmlandBelowTheCurrentBlockData.setValue(FarmBlock.MOISTURE, 0), 2); // CraftBukkit
+                                }
+                                world.setBlockAndUpdate(pos, (BlockState) ((Block) optional1.get()).defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, enumdirection));
+                            }
+                        }
+                    }
+                }
+            } else {
+                float f = CropBlock.getGrowthSpeed(this, world, pos);
+
+                if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                    int i = (Integer) state.getValue(StemBlock.AGE);
+
+                    if (i < 7) {
+                        state = (BlockState) state.setValue(StemBlock.AGE, i + 1);
+                        CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
+                    } else {
+                        Direction enumdirection = Direction.Plane.HORIZONTAL.getRandomDirection(random);
+                        BlockPos blockposition1 = pos.relative(enumdirection);
+                        BlockState iblockdata1 = world.getBlockState(blockposition1.below());
+
+                        if (world.getBlockState(blockposition1).isAir() && (iblockdata1.is(Blocks.FARMLAND) || iblockdata1.is(BlockTags.DIRT))) {
+                            Registry<Block> iregistry = world.registryAccess().registryOrThrow(Registries.BLOCK);
+                            Optional<Block> optional = iregistry.getOptional(this.fruit);
+                            Optional<Block> optional1 = iregistry.getOptional(this.attachedStem);
+
+                            if (optional.isPresent() && optional1.isPresent()) {
+                                // CraftBukkit start
+                                if (!CraftEventFactory.handleBlockGrowEvent(world, blockposition1, ((Block) optional.get()).defaultBlockState())) {
+                                    return;
+                                }
+                                // CraftBukkit end
+                                world.setBlockAndUpdate(pos, (BlockState) ((Block) optional1.get()).defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, enumdirection));
                             }
-                            // CraftBukkit end
-                            world.setBlockAndUpdate(pos, (BlockState) ((Block) optional1.get()).defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, enumdirection));
                         }
                     }
                 }
             }
-
+            // Plazma end
         }
     }
 
diff --git a/src/main/java/org/plazmamc/plazma/configurations/WorldConfigurations.java b/src/main/java/org/plazmamc/plazma/configurations/WorldConfigurations.java
index 9d6d4400be8bf189308cbd0cb14afa1ff0191a57..f96305be3b6e7c33d553764bdf4d8f2635939f9d 100644
--- a/src/main/java/org/plazmamc/plazma/configurations/WorldConfigurations.java
+++ b/src/main/java/org/plazmamc/plazma/configurations/WorldConfigurations.java
@@ -102,4 +102,15 @@ public class WorldConfigurations extends ConfigurationPart {
 
     }
 
+    public BlazinglySimpleFarmChecks blazinglySimpleFarmChecks;
+    public class BlazinglySimpleFarmChecks extends ConfigurationPart {
+
+        public boolean enabled = OPTIMIZE;ㅈ
+        public double defaultGrowthSpeed = 1.0;
+        public double moistGrowthSpeed = 5.0;
+        public boolean skipMiddleAgingStagesForCrops = false;
+
+
+    }
+
 }
