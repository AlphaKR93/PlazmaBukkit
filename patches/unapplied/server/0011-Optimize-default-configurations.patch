
diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
index 8f1645573780d12bf29d441d31eab1b76cd9e70f..8e35f7fbe3629ab05c16f52d72a3cd7343cf835f 100644
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
+++ b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
@@ -64,7 +64,7 @@ public class PufferfishConfig {
 		getString("info.version", "1.0");
 		setComment("info",
 				"Pufferfish Configuration",
-				"Check out Pufferfish Host for maximum performance server hosting: https://pufferfish.host",
+				// "Check out Pufferfish Host for maximum performance server hosting: https://pufferfish.host", // Plazma - Sponsorblock
 				"Join our Discord for support: https://discord.gg/reZw4vQV9H",
 				"Download new builds at https://ci.pufferfish.host/job/Pufferfish");
 		
@@ -219,7 +219,7 @@ public class PufferfishConfig {
     public static int maxProjectileLoadsPerTick;
     public static int maxProjectileLoadsPerProjectile;
     private static void projectileLoading() {
-        maxProjectileLoadsPerTick = getInt("projectile.max-loads-per-tick", 10, "Controls how many chunks are allowed", "to be sync loaded by projectiles in a tick.");
+        maxProjectileLoadsPerTick = getInt("projectile.max-loads-per-tick", org.plazmamc.plazma.configurations.PlazmaConfigurations.optimize() ? 8 : 10, "Controls how many chunks are allowed", "to be sync loaded by projectiles in a tick."); // Plazma - Optimize default configurations
         maxProjectileLoadsPerProjectile = getInt("projectile.max-loads-per-projectile", 10, "Controls how many chunks a projectile", "can load in its lifetime before it gets", "automatically removed.");
 
         setComment("projectile", "Optimizes projectile settings");
@@ -233,12 +233,12 @@ public class PufferfishConfig {
     public static int activationDistanceMod;
 
     private static void dynamicActivationOfBrains() throws IOException {
-        dearEnabled = getBoolean("dab.enabled", "activation-range.enabled", false); // Purpur
+        dearEnabled = getBoolean("dab.enabled", "activation-range.enabled", org.plazmamc.plazma.configurations.PlazmaConfigurations.optimize()); // Purpur // Plazma - Optimize default configurations
         startDistance = getInt("dab.start-distance", "activation-range.start-distance", 12,
                 "This value determines how far away an entity has to be",
                 "from the player to start being effected by DEAR.");
         startDistanceSquared = startDistance * startDistance;
-        maximumActivationPrio = getInt("dab.max-tick-freq", "activation-range.max-tick-freq", 20,
+        maximumActivationPrio = getInt("dab.max-tick-freq", "activation-range.max-tick-freq", org.plazmamc.plazma.configurations.PlazmaConfigurations.optimize() ? 7 : 8, // Plazma - Optimize default configurations
                 "This value defines how often in ticks, the furthest entity",
                 "will get their pathfinders and behaviors ticked. 20 = 1s");
         activationDistanceMod = getInt("dab.activation-dist-mod", "activation-range.activation-dist-mod", 8,
@@ -261,8 +261,18 @@ public class PufferfishConfig {
 	public static Map<String, Integer> projectileTimeouts;
 	private static void projectileTimeouts() {
 		// Set some defaults
-		getInt("entity_timeouts.SNOWBALL", -1);
-		getInt("entity_timeouts.LLAMA_SPIT", -1);
+		// Plazma start - Optimize default configurations
+		if (org.plazmamc.plazma.configurations.PlazmaConfigurations.optimize()) {
+			getInt("entity_timeouts.ARROW", 200);
+			getInt("entity_timeouts.EGG", 200);
+			getInt("entity_timeouts.ENDER_PEARL", 200);
+			getInt("entity_timeouts.SNOWBALL", 200);
+			getInt("entity_timeouts.LLAMA_SPIT", 200);
+		} else {
+			getInt("entity_timeouts.SNOWBALL", -1);
+			getInt("entity_timeouts.LLAMA_SPIT", -1);
+		}
+		// Plazma end - Optimize default configurations
 		setComment("entity_timeouts",
 				"These values define a entity's maximum lifespan. If an",
 				"entity is in this list and it has survived for longer than",
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index c867796f6..ecced2072 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -181,7 +222,7 @@ public class WorldConfiguration extends ConfigurationPart {
             @MergeMap
             public Reference2IntMap<MobCategory> spawnLimits = Util.make(new Reference2IntOpenHashMap<>(NaturalSpawner.SPAWNING_CATEGORIES.length), map -> Arrays.stream(NaturalSpawner.SPAWNING_CATEGORIES).forEach(mobCategory -> map.put(mobCategory, -1)));
             @MergeMap
-            public Map<MobCategory, DespawnRange> despawnRanges = Arrays.stream(MobCategory.values()).collect(Collectors.toMap(Function.identity(), category -> new DespawnRange(category.getNoDespawnDistance(), category.getDespawnDistance())));
+            public Map<MobCategory, DespawnRange> despawnRanges = Arrays.stream(MobCategory.values()).collect(Collectors.toMap(Function.identity(), category -> new DespawnRange(category.getNoDespawnDistance(), org.plazmamc.plazma.configurations.PlazmaConfigurations.optimize() ? (net.minecraft.server.MinecraftServer.getServer().server.getSimulationDistance() * 16) + 8 : category.getDespawnDistance()))); // Plazma - Optimize default configurations
             @MergeMap
             public Reference2IntMap<MobCategory> ticksPerSpawn = Util.make(new Reference2IntOpenHashMap<>(NaturalSpawner.SPAWNING_CATEGORIES.length), map -> Arrays.stream(NaturalSpawner.SPAWNING_CATEGORIES).forEach(mobCategory -> map.put(mobCategory, -1)));
 